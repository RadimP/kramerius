group statistics;



insertStatisticRecord() ::=<<
insert into statistics_access_log
    (record_ID, PID,DATE,REMOTE_IP_ADDRESS,"USER",REQUESTED_URL,STAT_ACTION, SESSION_ID, dnnt, providedbydnnt, evaluateMap, userSessionAttributes,
    dbversion,dnnt_labels
    )
    values(nextval('statistics_access_log_ID_SEQUENCE'),?,?,?,?,?,?,?,?,?,?,?,?,?);
>>




insertStatisticRecordDetail(identifiers) ::=<<
insert into statistic_access_log_detail
      (detail_ID, PID,model,ISSUED_DATE, SOLR_DATE,RIGHTS, LANG, TITLE, BRANCH_ID,RECORD_ID, ISSN, ISBN, CCNB)
values(nextval('statistic_access_log_detail_id_sequence'),
?, --PID
?, --model
?, --issued_date
?, --solr_date
?, --rights
?, --lang
?, --title
?, --branch_id
?, --record_id
?, --issn
?, --isbn
?  --ccnb
);
>>


insertStatisticRecordDetailAuthor() ::=<<
insert into statistic_access_log_detail_authors
      (author_id,AUTHOR_NAME,DETAIL_ID,RECORD_ID)
values(nextval('statistic_access_log_detail_authors_ID_SEQUENCE'),?,?,?);
>>

insertStatisticRecordDetailPublisher() ::=<<
insert into statistic_access_log_detail_publishers
      (publisher_id,publisher_name,DETAIL_ID,RECORD_ID)
values(nextval('statistic_access_log_detail_publishers_ID_SEQUENCE'),?,?,?);
>>

exportAllRecord() ::=<<

select 
    sa.record_id as record_id, 
    sa.pid as spid, 
    sa.date as sdate, 
    sa."USER" as suser, 
    sa.remote_ip_address as sremote_ip_address,
    sa.requested_url as srequested_url,
    sa.stat_action as sstat_action,
    sa.session_id as ssession_id,
    detail.pid as dpid,
    detail.model as dmodel,
    detail.issued_date as dissued_date,
    detail.rights as drights,
    detail.lang as dlang,
    detail.title as dtitle
    
 from statistics_access_log sa
 join statistic_access_log_detail detail on (sa.record_id=detail.record_id)

>>



/** Model report */
selectModelReport(action, model, paging, fromDefined, toDefined, visibility, licenseDefined ) ::=<<
	select * from _model_$model$  
     where 1=1 $dateFilter(fromDefined=fromDefined,toDefined=toDefined)$ $visibilityFilter(visibility=visibility)$ $license(licenseDefined=licenseDefined)$
	order by count desc
    $if(paging)$ $paging()$ $endif$
>>


selectModels() ::=<<
    select distinct model from statistic_access_log_detail
>>

/** date filter **/
dateFilter(fromDefined, toDefined) ::=<<
$if(fromDefined)$
   $if(toDefined)$
and "date" > ? and "date" < ? 
   $else$
and "date">? 
   $endif$
$elseif(toDefined)$
and "date" < ? 
$endif$
>>

/** visibility filter **/
visibilityFilter(visibility) ::=<<
$if(visibility.public)$
and "rights" =  'policy:public'
$elseif(visibility.private)$
and "rights" =  'policy:private' 
$endif$
>>



/** ipaddr filter **/
ipAddrFilter(ipaddr) ::=<<
$if(ipaddr)$
AND NOT remote_ip_address::text SIMILAR TO '$ipaddr$'
$endif$
>>

/** author report */ 
selectAuthorReport(action, paging, fromDefined, toDefined, visibility, licenseDefined) ::=<<
select count(*) as count, last(author_name) as author_name from _authors
WHERE 1=1 $dateFilter(fromDefined=fromDefined,toDefined=toDefined)$  $visibilityFilter(visibility=visibility)$ $license(licenseDefined=licenseDefined)$ 
group by author_name 
order by count desc 
>>


/** license filter */
license(licenseDefined) ::=<<
AND ? = ANY(dnnt_labels)
>>

/** paging */
paging() ::=<<offset ? limit ?>>


/** Language report */
selectLangReport(action, fromDefined, toDefined, visibility, licenseDefined) ::=<<

select count(*) as count, last(lang) as lang from _lang
WHERE 1=1 $dateFilter(fromDefined=fromDefined,toDefined=toDefined)$  $visibilityFilter(visibility=visibility)$ $license(licenseDefined=licenseDefined)$ 
group by lang 
order by count desc 
 
>>


/** pids filter */
pids(pids, column_name) ::=<< $pids:{pid|$column_name$= '$pid$'};separator=" OR "$ >>



/** vybrane pidy */
preparePidsView(action, pids, paging, ipaddr) ::=<<
 CREATE OR REPLACE VIEW pids_view AS 
   SELECT 
    last(l.record_id) AS record_id,
    last(date) as date,
    last(detail_id) as detail_id,
    last(rights) as rights,
    l.session_id,
    model,
    d.pid,
    stat_action,
    last(d.title) as title,
    last(remote_ip_address) as remote_ip_address
    
   FROM statistics_access_log l
     JOIN statistic_access_log_detail d USING (record_id)
  WHERE ($pids(pids=pids, column_name="d.pid")$) $ipAddrFilter(ipaddr=ipaddr)$
  GROUP BY l.session_id,model,d.pid,stat_action;
>>


/** pids */ 
selectPidsReport(action, paging, fromDefined, toDefined, visibility, ipaddr) ::=<<
    $if(action)$ 
SELECT COUNT(*) as count, pid, last(title) as title 
FROM (SELECT DISTINCT ON (pid, session_id , stat_action, remote_ip_address)
        pid, title
    FROM pids_view 
    WHERE stat_action='$action$' $dateFilter(fromDefined=fromDefined,toDefined=toDefined)$  $visibilityFilter(visibility=visibility)$ $ipAddrFilter(ipaddr=ipaddr)$ 
) as npid
GROUP BY pid
ORDER BY count DESC   
$if(paging)$ $paging()$ $endif$
    $else$   

SELECT COUNT(*) as count, pid, last(title) as title 
FROM (SELECT DISTINCT ON (pid, session_id, stat_action, remote_ip_address)
        pid, title
    FROM pids_view
    WHERE 1=1 $dateFilter(fromDefined=fromDefined,toDefined=toDefined)$  $visibilityFilter(visibility=visibility)$ $ipAddrFilter(ipaddr=ipaddr)$ 
) as npid
GROUP BY pid
ORDER BY count DESC  
$if(paging)$ $paging()$ $endif$
    $endif$   
>>

selectPidsReportUnique(action, paging, fromDefined, toDefined, visibility, ipaddr) ::=<<
    $if(action)$ 
SELECT COUNT(*) as count, pid, last(title) as title
FROM (SELECT DISTINCT ON (pid, stat_action, date, remote_ip_address)
        pid,
	date_trunc('day', date) as date,
        title
    FROM pids_view 
    WHERE stat_action='$action$' $dateFilter(fromDefined=fromDefined,toDefined=toDefined)$  $visibilityFilter(visibility=visibility)$ $ipAddrFilter(ipaddr=ipaddr)$ 
) as npid
GROUP BY pid
ORDER BY count DESC  
$if(paging)$ $paging()$ $endif$
    $else$   

SELECT COUNT(*) as count, pid, last(title) as title 
FROM (SELECT DISTINCT ON (pid, stat_action, date, remote_ip_address)
        pid,
	date_trunc('day', date) as date,
        title
    FROM pids_view 
    WHERE 1=1 $dateFilter(fromDefined=fromDefined,toDefined=toDefined)$  $visibilityFilter(visibility=visibility)$ $ipAddrFilter(ipaddr=ipaddr)$ 
) as npid
GROUP BY pid
ORDER BY count DESC 
$if(paging)$ $paging()$ $endif$
    $endif$   
>>



/** nkp logs */
/*
 *   select * from statistics_access_log sl
 *   join statistic_access_log_detail sd on sd.record_id = sl.record_id
 */
//nkpLogsReport(action, fromDefined, toDefined,visibility) ::=<<
nkpLogsReport(action, paging, fromDefined, toDefined, visibility, ipaddr) ::=<<
select
	sl.record_id as slrecord_id,
	sl.pid as slpid,
	sl.date as sldate,
	sl.remote_ip_address as slremote_ip_address,
	sl."USER" as sluser,
	sl.stat_action as slstat_action,
	sl.dnnt as sldnnt,
	sl.providedbydnnt as slprovidedbydnnt,
	sl.evaluatemap as slevaluatemap,
	sl.usersessionattributes as slusersessionattributes,
	sl.dbversion as sldbversion,
	sl.dnnt_labels as sldnnt_labels,


	sd.detail_id as sddetail_id,
	sd.pid as sdpid,
	sd.model as sdmodel,
	sd.issued_date as sdissued_date,
	sd.solr_date as sdsolr_date,
	sd.rights as sdrights,
	sd.lang as sdlang,
	sd.title as sdtitle,
	sd.branch_id as sdbranch_id,
	sd.issn as sdissn,
	sd.isbn as sdisbn,
	sd.ccnb as sdccnb,

	sa.author_id as saauthor_id,
	sa.author_name as saauthor_name,

	sp.publisher_id as sppublisher_id,
	sp.publisher_name as sppublisher_name

	from statistics_access_log sl
join statistic_access_log_detail sd using(record_id)
left join statistic_access_log_detail_authors sa using(detail_id)
left join statistic_access_log_detail_publishers sp using(detail_id)
WHERE 1=1 $dateFilter(fromDefined=fromDefined,toDefined=toDefined)$ $visibilityFilter(visibility=visibility)$
order by sl.record_id, sd.detail_id, sd.branch_id, sa.author_id

>>
